# docker-compose.yml - Kafka 4.0 with KRaft
services:
  broker:
    image: apache/kafka:4.0.0
    container_name: kafka-broker
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - ./kafka-data:/opt/kafka/data
    environment:
      # KRaft specific configurations for Kafka 4.0
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_LOG_DIRS: /opt/kafka/data/logs
      KAFKA_CLUSTER_ID: hNlYf2QxS1aP3cR5tG7uZ9vB0dE4kF6j
      
      # Performance and operational settings
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 104857600
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      
      # Network settings
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_NETWORK_THREADS: 3
      KAFKA_NUM_IO_THREADS: 8
      
      # JVM settings for better stability
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35"
    command:
      - "sh"
      - "-c"
      - |
        echo "Starting Kafka 4.0 with KRaft mode..."
        
        # Create necessary directories
        mkdir -p /opt/kafka/data/logs
        mkdir -p /opt/kafka/config/kraft
        
        # Create KRaft server.properties configuration file
        cat > /opt/kafka/config/kraft/server.properties << EOF
        # KRaft mode configuration for Kafka 4.0
        node.id=$${KAFKA_NODE_ID}
        process.roles=$${KAFKA_PROCESS_ROLES}
        
        # Listeners configuration
        listeners=$${KAFKA_LISTENERS}
        advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS}
        listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
        
        # Controller configuration
        controller.quorum.voters=$${KAFKA_CONTROLLER_QUORUM_VOTERS}
        controller.listener.names=$${KAFKA_CONTROLLER_LISTENER_NAMES}
        
        # Storage configuration
        log.dirs=$${KAFKA_LOG_DIRS}
        
        # Topic configuration
        auto.create.topics.enable=$${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
        default.replication.factor=$${KAFKA_DEFAULT_REPLICATION_FACTOR}
        min.insync.replicas=$${KAFKA_MIN_INSYNC_REPLICAS}
        num.partitions=$${KAFKA_NUM_PARTITIONS}
        
        # Performance settings
        num.network.threads=$${KAFKA_NUM_NETWORK_THREADS}
        num.io.threads=$${KAFKA_NUM_IO_THREADS}
        socket.send.buffer.bytes=$${KAFKA_SOCKET_SEND_BUFFER_BYTES}
        socket.receive.buffer.bytes=$${KAFKA_SOCKET_RECEIVE_BUFFER_BYTES}
        socket.request.max.bytes=$${KAFKA_SOCKET_REQUEST_MAX_BYTES}
        
        # Log retention settings
        log.retention.hours=$${KAFKA_LOG_RETENTION_HOURS}
        log.segment.bytes=$${KAFKA_LOG_SEGMENT_BYTES}
        log.retention.check.interval.ms=$${KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS}
        
        # Additional KRaft specific settings
        inter.broker.listener.name=PLAINTEXT
        
        # Ensure smooth operation
        offsets.topic.replication.factor=1
        transaction.state.log.replication.factor=1
        transaction.state.log.min.isr=1
        group.initial.rebalance.delay.ms=0
        EOF
        
        echo "Generated KRaft configuration file"
        
        # Check if cluster is already formatted
        if [ ! -f /opt/kafka/data/meta.properties ]; then
          echo "Formatting storage for KRaft..."
          /opt/kafka/bin/kafka-storage.sh format \
            --config /opt/kafka/config/kraft/server.properties \
            --cluster-id $${KAFKA_CLUSTER_ID}
        else
          echo "Storage already formatted, skipping format step"
        fi
        
        echo "Starting Kafka server..."
        exec /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/kraft/server.properties
    restart: unless-stopped
    healthcheck:
      test: [
        "CMD-SHELL",
        "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"
      ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s


